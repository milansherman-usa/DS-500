dplyr::group_by(FYMonthEndingDate, cust_type) %>%
dplyr::summarise(customers = n()) %>%
mutate(cust2 = if_else(cust_type == 'new_lapsed', -customers, customers))
View(cust_summary)
ggplot(cust_summary %>% filter(cust_type != 'lapsed' & FYMonthEndingDate != '2020-04-26'),
aes(fill = cust_type,x = FYMonthEndingDate, y = cust2)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "AO Customers by Month",
x = "Month")
AO_trips <- function() {
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "hy-vee-dw-sql-server-p.database.windows.net",
Database = "hy-vee-dw-db",
UID = "MiSherman@hy-vee.net",
Authentication = "ActiveDirectoryInteractive")
dbGetQuery(con, "DECLARE @EndDate DATE = (select max(FYMonthEndingDate)
from pos_mart.DateDimension
where fymonthendingdate < getdate())
DECLARE @StartDate DATE = (select DATEADD(YEAR, -2, @EndDate))
IF OBJECT_ID('tempdb..#cohort') is not null
drop table #cohort
SELECT DISTINCT FYMonthEndingDate,
CustomerDimensionID
INTO #cohort
FROM POS_MART.SalesBasketFact sbf
JOIN POS_MART.DateDimension d on d.DateDimensionId = sbf.DateDimensionID
where d.DateDimensionID BETWEEN CONVERT(VARCHAR(10), @StartDate, 112) and CONVERT(VARCHAR(10), @EndDate, 112)
AND CustomerDimensionID <> 1
and CheckoutTypeDimensionID = 3")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#rank') is not null
drop table #rank
select DISTINCT * ,
Rank() OVER(PARTITION BY CustomerDimensionID ORDER BY FYMonthEndingDate) AS month_rank
into #rank
from #cohort")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#cust_type') is not null
drop table #cust_type
SELECT *,
CASE WHEN month_rank = 1 THEN 'new'
WHEN month_rank > 1 THEN 'returning'
END as cust_type
INTO #cust_type
FROM #rank")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#cust_month') is not null
drop table #cust_month
select DISTINCT c1.CustomerDimensionID,
c2.FYMonthEndingDate
INTO #cust_month
from #cohort c1
CROSS JOIN #cohort c2")
trips <- dbGetQuery(con, "IF OBJECT_ID('tempdb..#trips') is not null
drop table #trips
SELECT DISTINCT cm.CustomerDimensionID,
cm.FYMonthEndingDate,
month_rank,
cust_type,
CASE WHEN c.FYMonthEndingDate IS NULL then 0
ELSE 1 END AS trip
FROM #cust_month cm
LEFT JOIN #cust_type c ON c.CustomerDimensionID = cm.CustomerDimensionID
and c.FYMonthEndingDate = cm.FYMonthEndingDate")
return(trips)}
trips <- AO_trips()
trips_clean <- trips %>%
dplyr::select(-cust_type) %>%
dplyr::group_by(CustomerDimensionID) %>%
dplyr::arrange(FYMonthEndingDate) %>%
dplyr::mutate(total_trips = cumsum(trip)) %>%
dplyr::filter(total_trips != 0) %>%
dplyr::mutate(cust_type = case_when(month_rank == 1 ~ 'new',
trip == 0 & lag(trip,1) == 1 ~ 'new_lapsed',
trip == 0 & lag(trip,1) == 0 ~ 'lapsed',
trip == 1 & lag(trip,1) == 1 ~ 'returning',
trip == 1 & lag(trip,1) == 0 ~ 'win_back'))
View(trips_clean)
View(trips_clean)
ggplot(cust_summary %>% filter(cust_type != 'lapsed' & FYMonthEndingDate != '2019-04-28'),
aes(fill = cust_type,x = FYMonthEndingDate, y = cust2)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "AO Customers by Month",
x = "Month")
cust_summary <- trips_clean %>%
dplyr::group_by(FYMonthEndingDate, cust_type) %>%
dplyr::summarise(customers = n()) %>%
mutate(cust2 = if_else(cust_type == 'new_lapsed', -customers, customers))
ggplot(cust_summary %>% filter(cust_type != 'lapsed' & FYMonthEndingDate != '2019-04-28'),
aes(fill = cust_type,x = FYMonthEndingDate, y = cust2)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "AO Customers by Month",
x = "Month")
ggplot(cust_summary %>% filter(cust_type != 'lapsed' & FYMonthEndingDate != '2019-04-28'),
aes(fill = cust_type,x = FYMonthEndingDate, y = cust2)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "AO Customers by Month",
x = "Month",
y = "Customers")
require(odbc)
require(dbplyr)
require(dplyr)
require(lubridate)
require(ggplot2)
con <- dbConnect(odbc::odbc(),
.connection_string = "Driver={ODBC Driver 17 for SQL Server};
Server=hy-vee-dw-sql-server-p.database.windows.net;
Database=hy-vee-dw-db;
Authentication=ActiveDirectoryIntegrated;")
PCT_DaysBetween <- tbl(con, in_schema("POS_MART", "SalesBasketFact")) %>%
dplyr::filter(CustomerDimensionID != 1 &
CheckoutTypeDimensionID ==3 &
DateDimensionID >= 20190401) %>%
dplyr::group_by(CustomerDimensionID,DateDimensionID)
tbl(con, in_schema("POS_MART", "SalesBasketFact")) %>%
dplyr::filter(CustomerDimensionID != 1 &
CheckoutTypeDimensionID ==3 &
DateDimensionID >= 20190401) %>%
dplyr::group_by(CustomerDimensionID,DateDimensionID)
PCT_DaysBetween <- tbl(con, in_schema("POS_MART", "SalesBasketFact")) %>%
dplyr::filter(CustomerDimensionID != 1 &
CheckoutTypeDimensionID ==3 &
DateDimensionID >= 20190401) %>%
dplyr::group_by(CustomerDimensionID,DateDimensionID) %>%
dplyr::summarize(Basketsn = n()) %>%
dplyr::ungroup() %>%
dbplyr::window_order(DateDimensionID) %>%
#dplyr::arrange(DateDimensionID) %>%
dplyr::group_by(CustomerDimensionID) %>%
dplyr::mutate(UID = 1,
UID = cumsum(UID),
priorDateDimensionID = lag(DateDimensionID,
1,
order_by = UID),
DaysBetween = DateDimensionID - priorDateDimensionID) %>%
dplyr::ungroup() %>%
dplyr::filter(UID > 1 &
DaysBetween <= 365) %>%
dplyr::group_by(DaysBetween) %>%
dplyr::summarize(n = n()) %>%
dplyr::ungroup() %>%
dbplyr::window_order(DaysBetween)
dbplyr::sql_render(PCT_DaysBetween)
setwd("~/GitHub/Ad-Hoc/Segment Loads")
tracking_table2 <- read.csv("Flora Promo Tracking.csv")
View(tracking_table2)
con <- odbcDriverConnect("Driver={ODBC Driver 17 for SQL Server};Server=hy-vee-dw-sql-server-p.database.windows.net;Database=hy-vee-dw-db;Authentication=ActiveDirectoryIntegrated;")
require(odbc)
require(dplyr)
require(lubridate)
require(ggplot2)
con <- odbcDriverConnect("Driver={ODBC Driver 17 for SQL Server};Server=hy-vee-dw-sql-server-p.database.windows.net;Database=hy-vee-dw-db;Authentication=ActiveDirectoryIntegrated;")
library(RODBC)
con <- odbcDriverConnect("Driver={ODBC Driver 17 for SQL Server};Server=hy-vee-dw-sql-server-p.database.windows.net;Database=hy-vee-dw-db;Authentication=ActiveDirectoryIntegrated;")
sqlSave(con, tracking_table2, tablename = "MARKETING.LOY_PromotionTracking", fast = TRUE)
sqlSave(con, tracking_table2, tablename = "MARKETING.LOY_PromotionTracking2", fast = TRUE)
iris
setwd("C:/Users/misherman/Desktop/Intro to DS")
iris <- iris
write.csv(iris, "iris.csv")
cars <- cars
write.csv(cars, "cars.csv")
?pivot_longer()
vignette()
vignetee("pivot")
vignette("pivot")
fish_encounters
cars
carData::AMSsurvey
carData::Arrests
carData::Chirot
data1 <- carData::Chirot
write.csv(data1, "sample.csv")
carData::Florida
carData::WeightLoss
weightloss <- carData::WeightLoss
weightloss <- carData::WeightLoss
write.csv(weightloss, "weightloss.csv")
carData::Davis
AO_trips <- function() {
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "hy-vee-dw-sql-server-p.database.windows.net",
Database = "hy-vee-dw-db",
UID = "MiSherman@hy-vee.net",
Authentication = "ActiveDirectoryInteractive")
dbGetQuery(con, "DECLARE @EndDate DATE = (select max(FYMonthEndingDate)
from pos_mart.DateDimension
where fymonthendingdate < getdate())
DECLARE @StartDate DATE = (select DATEADD(YEAR, -2, @EndDate))
IF OBJECT_ID('tempdb..#cohort') is not null
drop table #cohort
SELECT DISTINCT FYMonthEndingDate,
CustomerDimensionID
INTO #cohort
FROM POS_MART.SalesBasketFact sbf
JOIN POS_MART.DateDimension d on d.DateDimensionId = sbf.DateDimensionID
where d.DateDimensionID BETWEEN CONVERT(VARCHAR(10), @StartDate, 112) and CONVERT(VARCHAR(10), @EndDate, 112)
AND CustomerDimensionID <> 1
and CheckoutTypeDimensionID = 3")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#rank') is not null
drop table #rank
select DISTINCT * ,
Rank() OVER(PARTITION BY CustomerDimensionID ORDER BY FYMonthEndingDate) AS month_rank
into #rank
from #cohort")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#cust_type') is not null
drop table #cust_type
SELECT *,
CASE WHEN month_rank = 1 THEN 'new'
WHEN month_rank > 1 THEN 'returning'
END as cust_type
INTO #cust_type
FROM #rank")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#cust_month') is not null
drop table #cust_month
select DISTINCT c1.CustomerDimensionID,
c2.FYMonthEndingDate
INTO #cust_month
from #cohort c1
CROSS JOIN #cohort c2")
trips <- dbGetQuery(con, "IF OBJECT_ID('tempdb..#trips') is not null
drop table #trips
SELECT DISTINCT cm.CustomerDimensionID,
cm.FYMonthEndingDate,
month_rank,
cust_type,
CASE WHEN c.FYMonthEndingDate IS NULL then 0
ELSE 1 END AS trip
FROM #cust_month cm
LEFT JOIN #cust_type c ON c.CustomerDimensionID = cm.CustomerDimensionID
and c.FYMonthEndingDate = cm.FYMonthEndingDate")
return(trips)}
trips <- AO_trips()
View(trips)
library(dplyr)
four_week_metrics <- function() {
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "hy-vee-dw-sql-server-p.database.windows.net",
Database = "hy-vee-dw-db",
UID = "MiSherman@hy-vee.net",
Authentication = "ActiveDirectoryInteractive")
dbGetQuery(con, "DECLARE @EndDate date = (select max(fyweekendingDate)
from pos_mart.datedimension
where fyweekendingdate < getdate())
IF OBJECT_ID('tempdb..#orders') is not null
drop table #orders
SELECT distinct ord_ordID AS orderID,
CAST(COALESCE(ord_fulfillmentdate,ord_newfulfillmentdate) as DATE) AS fulfill_date,
ord_storeID AS storeID
INTO #orders
FROM [POS_REPORTS].[OGS_Order]
where CAST(ord_orderdate AS Date) > DATEADD(WEEK, -52, GETDATE())
AND ord_otyid <> 2")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#ecom') IS NOT NULL
DROP TABLE #ecom
SELECT FYWeekEndingDate,
StoreID,
COUNT(DISTINCT orderID) AS orders
INTO #ecom
FROM #orders o
JOIN POS_MART.DateDimension d ON d.ActualDate = o.fulfill_date
where FYWeekEndingDate < GETDATE()
GROUP BY FYWeekEndingDate, Storeid")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#4_wk') is not null
drop table #4_wk
SELECT DISTINCT Storeid,
FYWeekEndingDate,
SUM(orders) OVER (PARTItiON BY Storeid ORDER BY fyweekendingdate ASC ROWS 3 PRECEDING)  as four_week_orders
INTO #4_wk
FROM #ecom")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#store_orders') is not null
drop table #store_orders
select FYWeekEndingDate,
storename,
four_week_orders
INTO #store_orders
from #4_wk f
join POS_MART.LocationDimension l ON l.StoreNumber = f.storeid AND l.LocationTypeID IN (1,2,7)")
dbGetQuery(con, "DECLARE @EndDate date = (select max(fyweekendingDate)
from pos_mart.datedimension
where fyweekendingdate < getdate())
IF OBJECT_ID('tempdb..#NPS') is not null
drop table #NPS
SELECT FYWeekEndingDate,
Store,
responses AS four_week_reponses,
NPS AS four_week_NPS
INTO #nps
from Marketing.Loy_four_week_NPS_pickup four
where FYWeekEndingDate > DateAdd(week, -52, @EndDate)")
four_week <-  dbGetQuery(con, "select s.FYWeekEndingDate,
Store,
four_week_reponses,
four_week_orders,
four_week_NPS
from #nps
JOIN #store_orders s ON s.FYWeekEndingDate = #nps.FYWeekEndingDate
AND s.StoreName = #nps.Store")
return(four_week)}
NPS_orders <- four_week_metrics()
end_date <- max(NPS_orders$FYWeekEndingDate)
# get orders and NPS from the beginning of the quarter
start <- NPS_orders %>%
filter(FYWeekEndingDate == end_date - 91) %>%
group_by(Store) %>%
summarise(start_orders =  four_week_orders,
start_NPS = four_week_NPS)
# get orders and NPS from the end of the quarter
finish <- NPS_orders %>%
filter(FYWeekEndingDate == end_date) %>%
group_by(Store) %>%
summarise(finish_orders =  four_week_orders,
finish_NPS = four_week_NPS)
# create a single dataframe with the above info
stores <- inner_join(start, finish, by = "Store") %>%
mutate(orders_change = finish_orders - start_orders,
NPS_change = finish_NPS - start_NPS,
orders_sign = if_else(orders_change > 0, 'positive', 'negative'),
NPS_sign = if_else(NPS_change > 0, 'positive', 'negative'),
signs = case_when (orders_sign == 'positive' & NPS_sign == 'positive' ~ '++',
orders_sign == 'positive' & NPS_sign == 'negative' ~ '+-',
orders_sign == 'negative' & NPS_sign == 'positive' ~ '-+',
orders_sign == 'negative' & NPS_sign == 'negative' ~ '--'))
# check how many of each (note: no stores increased orders)
stores %>% filter(signs == '-+') %>% summarise(num = n())
stores %>% filter(signs == '--') %>% summarise(num = n())
# get averages over the quarter
store_metrics <- NPS_orders %>%
filter(FYWeekEndingDate >= end_date - 91) %>%
group_by(Store) %>%
summarise(avg_responses = median(four_week_responses),
avg_NPS = median(four_week_NPS),
avg_orders = median(four_week_orders))
NPS_orders <- NPS_orders %>%
renmae(four_week_responses = four_week_reponses)
NPS_orders <- NPS_orders %>%
rename(four_week_responses = four_week_reponses)
# get averages over the quarter
store_metrics <- NPS_orders %>%
filter(FYWeekEndingDate >= end_date - 91) %>%
group_by(Store) %>%
summarise(avg_responses = median(four_week_responses),
avg_NPS = median(four_week_NPS),
avg_orders = median(four_week_orders))
# determine correlations between orders and NPS for each store over the quarter
correlation <- NPS_orders %>%
filter(FYWeekEndingDate >= end_date - 91) %>%
group_by(Store) %>%
summarise(raw_cor = cor(four_week_orders,four_week_NPS))
# pull all relevant metrics into a single dataframe
store_all <- inner_join(store_metrics, correlation, by = "Store")
require(odbc)
require(dplyr)
require(lubridate)
require(ggplot2)
AO_trips <- function() {
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "hy-vee-dw-sql-server-p.database.windows.net",
Database = "hy-vee-dw-db",
UID = "MiSherman@hy-vee.net",
Authentication = "ActiveDirectoryInteractive")
dbGetQuery(con, "DECLARE @EndDate DATE = (select max(FYMonthEndingDate)
from pos_mart.DateDimension
where fymonthendingdate < getdate())
DECLARE @StartDate DATE = (select DATEADD(YEAR, -2, @EndDate))
IF OBJECT_ID('tempdb..#cohort') is not null
drop table #cohort
SELECT DISTINCT  ord_ordID,
cast(COALESCE(ord_newfulfillmentdate, ord_fulfillmentdate) as Date) AS fulfill_date,
COALESCE(ord_newfulfillmentendtime, ord_fulfillmentendtime) AS fulfill_time,
FYMonthEndingDate,
CustomerDimensionID
INTO #cohort
FROM [POS_REPORTS].[OGS_Order] o
JOIN POS_MART.DateDimension d on d.ActualDate = cast(COALESCE(ord_newfulfillmentdate, ord_fulfillmentdate) as Date)
JOIN POS_MART.CustomerDimension cd ON cd.ClubCardID = o.ord_fuelsavercardnumber
where d.DateDimensionID BETWEEN CONVERT(VARCHAR(10), @StartDate, 112) and CONVERT(VARCHAR(10), @EndDate, 112)
AND CustomerDimensionID <> 1")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#cust_month') is not null
drop table #cust_month
select DISTINCT c1.CustomerDimensionID,
c2.FYMonthEndingDate
INTO #cust_month
from #cohort c1
CROSS JOIN #cohort c2")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#trips') is not null
drop table #trips
SELECT DISTINCT
cm.CustomerDimensionID,
cm.FYMonthEndingDate,
CASE WHEN c.FYMonthEndingDate IS NULL then 0
ELSE 1 END AS trip
INTO #trips
FROM #cust_month cm
LEFT JOIN #cohort c ON c.CustomerDimensionID = cm.CustomerDimensionID
and c.FYMonthEndingDate = cm.FYMonthEndingDate")
dbGetQuery(con, "if object_id('tempdb..#total_trip') is not null
drop table #total_trip
select customerdimensionid,
fymonthendingdate,
trip,
lag(trip) over(partition by customerdimensionid order by fymonthendingdate) AS prev_trip,
sum(trip) OVER(PARTITION BY CustomerDimensionID order by fymonthendingdate) As total_trips
into #total_trip
from #trips")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#cust_type') is not null
drop table #cust_type
SELECT customerdimensionid,
fymonthendingdate,
trip,
total_trips,
CASE WHEN trip = 1 and total_trips = 1 then 'new'
when trip = 1 and prev_trip = 1 then 'returning'
when trip = 0 and prev_trip = 1 then 'new_lapsed'
when trip = 0 and prev_trip = 0 then 'lapsed'
when trip = 1 and prev_trip = 0 then 'win_back'
end as cust_type
INTO #cust_type
FROM #total_trip
where total_trips <> 0")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#baskets') is not null
drop table #baskets
SELECT DISTINCT ord_ordID,
cm.CustomerDimensionID,
cm.FYMonthEndingDate,
row_number() OVER(PARTITION BY c.CustomerDimensionID, c.FYMonthEndingDate ORDER BY fulfill_date desc, fulfill_time desc) as month_order
INTO #baskets
FROM #cust_month cm
JOIN #cohort c on c.CustomerDimensionID = cm.CustomerDimensionID
and c.Fymonthendingdate = cm.fymonthendingdate")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#last_basket') is not null
drop table #last_basket
select * into #last_basket from (
select customerdimensionid,
fymonthendingdate,
trip,
cust_type,
0 as basket
from #cust_type
WHERE cust_type IN ('new_lapsed', 'lapsed')
union
SELECT
c.customerdimensionid,
c.fymonthendingdate,
trip,
cust_type,
ord_ordID as basket
FROM #cust_type c
left join #baskets b on b.customerdimensionid = c.customerdimensionid
and b.fymonthendingdate = c.fymonthendingdate
where month_order = 1) tmp")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#baskets') is not null
drop table #baskets
SELECT DISTINCT ord_ordID,
cm.CustomerDimensionID,
cm.FYMonthEndingDate,
row_number() OVER(PARTITION BY c.CustomerDimensionID, c.FYMonthEndingDate ORDER BY fulfill_date desc, fulfill_time desc) as month_order
INTO #baskets
FROM #cust_month cm
JOIN #cohort c on c.CustomerDimensionID = cm.CustomerDimensionID
and c.Fymonthendingdate = cm.fymonthendingdate")
dbGetQuery(con, "select customerdimensionid,
fymonthendingdate,
trip,
cust_type,
basket,
lag(basket) over(partition by customerdimensionid order by fymonthendingdate) As last_basket
into #final
from #last_basket")
dbGetQuery(con, "IF OBJECT_ID('tempdb..#lapsed_returning') is not null
drop table #lapsed_returning
select cust_type,
last_basket,
cast(COALESCE(ord_newfulfillmentdate, ord_fulfillmentdate) as Date) AS fulfill_date,
CASE WHEN ord_newfulfillmentdate is not null then 'delay'
ELSE 'no delay' end AS date_delay,
COALESCE(ord_newfulfillmentendtime, ord_fulfillmentendtime) AS fulfill_time,
CASE WHEN ord_newfulfillmentendtime is not null then 'delay'
ELSE 'no delay' end AS time_delay,
CASE WHEN ord_otyid = 2 THEN 'delivery'
ELSE 'pick-up' end as order_type,
ord_StoreID as storenumber
INTO #lapsed_returning
FROM [POS_REPORTS].[OGS_Order] o
join #final f ON f.last_basket = o.ord_ordID
where cust_type in ('new_lapsed', 'returning')")
trips <- dbGetQuery(con, "select cust_type,
last_basket,
order_type,
date_delay,
time_delay,
storenumber,
DayOfWeekName AS [day],
CASE WHEN fulfill_time IN ('00:30:00', '01:30:00', '01:00:00', '02:00:00','03:00:00', '04:30:00', '05:00:00', '06:00:00','06:30:00',
'07:00:00', '07:30:00', '08:00:00', '08:30:00', '09:00:00', '09:30:00', '10:00:00', '10:15:00','10:30:00', '11:00:00', '11:30:00', '12:00:00') THEN 'Morning'
WHEN fulfill_time IN ('12:30:00', '12:45:00', '13:00:00', '13:30:00', '14:00:00', '14:15:00', '14:30:00', '15:00:00', '15:30:00', '16:00:00') THEN 'Afternoon'
WHEN fulfill_time IN ('16:30:00', '16:40:00', '17:00:00', '17:30:00', '18:00:00', '18:15:00', '18:30:00', '18:59:00', '19:00:00') THEN 'Evening'
WHEN fulfill_time IN ('19:15:00', '19:30:00', '20:00:00', '20:30:00', '21:00:00', '21:30:00', '21:40:00', '22:00:00',
'22:30:00', '23:00:00', '23:30:00', '23:42:00', '23:59:00') THEN 'Night'
END as time_of_day
FROM #lapsed_returning l
JOIN pos_mart.DateDimension d on d.ActualDate = l.fulfill_date
")
return(trips)}
trips <- AO_trips()
con <- dbConnect(odbc(),
Driver = "ODBC Driver 17 for SQL Server",
Server = "hy-vee-dw-sql-server-p.database.windows.net",
Database = "hy-vee-dw-db",
UID = "MiSherman@hy-vee.net",
Authentication = "ActiveDirectoryInteractive")
